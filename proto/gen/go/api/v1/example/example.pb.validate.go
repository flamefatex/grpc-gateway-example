// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/example/example.proto

package example

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enumeration "github.com/flamefatex/grpc-gateway-example/proto/gen/go/enumeration"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enumeration.ExampleType(0)
)

// Validate checks the field values on Example with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Example) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Example with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExampleMultiError, or nil if none found.
func (m *Example) ValidateAll() error {
	return m.validate(true)
}

func (m *Example) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleMultiError(errors)
	}

	return nil
}

// ExampleMultiError is an error wrapping multiple validation errors returned
// by Example.ValidateAll() if the designated constraints aren't met.
type ExampleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleMultiError) AllErrors() []error { return m }

// ExampleValidationError is the validation error returned by Example.Validate
// if the designated constraints aren't met.
type ExampleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleValidationError) ErrorName() string { return "ExampleValidationError" }

// Error satisfies the builtin error interface
func (e ExampleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExample.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleValidationError{}

// Validate checks the field values on ExampleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleListRequestMultiError, or nil if none found.
func (m *ExampleListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleListRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleListRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleListRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ExampleListRequestMultiError(errors)
	}

	return nil
}

// ExampleListRequestMultiError is an error wrapping multiple validation errors
// returned by ExampleListRequest.ValidateAll() if the designated constraints
// aren't met.
type ExampleListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleListRequestMultiError) AllErrors() []error { return m }

// ExampleListRequestValidationError is the validation error returned by
// ExampleListRequest.Validate if the designated constraints aren't met.
type ExampleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleListRequestValidationError) ErrorName() string {
	return "ExampleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleListRequestValidationError{}

// Validate checks the field values on ExampleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleListResponseMultiError, or nil if none found.
func (m *ExampleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleListResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleListResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleListResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleListResponseValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleListResponseValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleListResponseValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExampleListResponseValidationError{
						field:  fmt.Sprintf("Examples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExampleListResponseValidationError{
						field:  fmt.Sprintf("Examples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExampleListResponseValidationError{
					field:  fmt.Sprintf("Examples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExampleListResponseMultiError(errors)
	}

	return nil
}

// ExampleListResponseMultiError is an error wrapping multiple validation
// errors returned by ExampleListResponse.ValidateAll() if the designated
// constraints aren't met.
type ExampleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleListResponseMultiError) AllErrors() []error { return m }

// ExampleListResponseValidationError is the validation error returned by
// ExampleListResponse.Validate if the designated constraints aren't met.
type ExampleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleListResponseValidationError) ErrorName() string {
	return "ExampleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleListResponseValidationError{}

// Validate checks the field values on ExampleGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExampleGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleGetRequestMultiError, or nil if none found.
func (m *ExampleGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !strings.HasPrefix(m.GetId(), "example") {
		err := ExampleGetRequestValidationError{
			field:  "Id",
			reason: "value does not have prefix \"example\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExampleGetRequestMultiError(errors)
	}

	return nil
}

// ExampleGetRequestMultiError is an error wrapping multiple validation errors
// returned by ExampleGetRequest.ValidateAll() if the designated constraints
// aren't met.
type ExampleGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleGetRequestMultiError) AllErrors() []error { return m }

// ExampleGetRequestValidationError is the validation error returned by
// ExampleGetRequest.Validate if the designated constraints aren't met.
type ExampleGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleGetRequestValidationError) ErrorName() string {
	return "ExampleGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleGetRequestValidationError{}

// Validate checks the field values on ExampleGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleGetResponseMultiError, or nil if none found.
func (m *ExampleGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleGetResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleGetResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleGetResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleGetResponseValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleGetResponseValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleGetResponseValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleGetResponseMultiError(errors)
	}

	return nil
}

// ExampleGetResponseMultiError is an error wrapping multiple validation errors
// returned by ExampleGetResponse.ValidateAll() if the designated constraints
// aren't met.
type ExampleGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleGetResponseMultiError) AllErrors() []error { return m }

// ExampleGetResponseValidationError is the validation error returned by
// ExampleGetResponse.Validate if the designated constraints aren't met.
type ExampleGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleGetResponseValidationError) ErrorName() string {
	return "ExampleGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleGetResponseValidationError{}

// Validate checks the field values on ExampleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleCreateRequestMultiError, or nil if none found.
func (m *ExampleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetExample() == nil {
		err := ExampleCreateRequestValidationError{
			field:  "Example",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleCreateRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleCreateRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleCreateRequestValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleCreateRequestMultiError(errors)
	}

	return nil
}

// ExampleCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ExampleCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ExampleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleCreateRequestMultiError) AllErrors() []error { return m }

// ExampleCreateRequestValidationError is the validation error returned by
// ExampleCreateRequest.Validate if the designated constraints aren't met.
type ExampleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleCreateRequestValidationError) ErrorName() string {
	return "ExampleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleCreateRequestValidationError{}

// Validate checks the field values on ExampleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleCreateResponseMultiError, or nil if none found.
func (m *ExampleCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleCreateResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleCreateResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleCreateResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleCreateResponseMultiError(errors)
	}

	return nil
}

// ExampleCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ExampleCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ExampleCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleCreateResponseMultiError) AllErrors() []error { return m }

// ExampleCreateResponseValidationError is the validation error returned by
// ExampleCreateResponse.Validate if the designated constraints aren't met.
type ExampleCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleCreateResponseValidationError) ErrorName() string {
	return "ExampleCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleCreateResponseValidationError{}

// Validate checks the field values on ExampleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleUpdateRequestMultiError, or nil if none found.
func (m *ExampleUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetExample() == nil {
		err := ExampleUpdateRequestValidationError{
			field:  "Example",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleUpdateRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleUpdateRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleUpdateRequestValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleUpdateRequestMultiError(errors)
	}

	return nil
}

// ExampleUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ExampleUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ExampleUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleUpdateRequestMultiError) AllErrors() []error { return m }

// ExampleUpdateRequestValidationError is the validation error returned by
// ExampleUpdateRequest.Validate if the designated constraints aren't met.
type ExampleUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleUpdateRequestValidationError) ErrorName() string {
	return "ExampleUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleUpdateRequestValidationError{}

// Validate checks the field values on ExampleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleUpdateResponseMultiError, or nil if none found.
func (m *ExampleUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleUpdateResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleUpdateResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleUpdateResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleUpdateResponseMultiError(errors)
	}

	return nil
}

// ExampleUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ExampleUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ExampleUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleUpdateResponseMultiError) AllErrors() []error { return m }

// ExampleUpdateResponseValidationError is the validation error returned by
// ExampleUpdateResponse.Validate if the designated constraints aren't met.
type ExampleUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleUpdateResponseValidationError) ErrorName() string {
	return "ExampleUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleUpdateResponseValidationError{}

// Validate checks the field values on ExampleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleDeleteRequestMultiError, or nil if none found.
func (m *ExampleDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !strings.HasPrefix(m.GetId(), "example") {
		err := ExampleDeleteRequestValidationError{
			field:  "Id",
			reason: "value does not have prefix \"example\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExampleDeleteRequestMultiError(errors)
	}

	return nil
}

// ExampleDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ExampleDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ExampleDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleDeleteRequestMultiError) AllErrors() []error { return m }

// ExampleDeleteRequestValidationError is the validation error returned by
// ExampleDeleteRequest.Validate if the designated constraints aren't met.
type ExampleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleDeleteRequestValidationError) ErrorName() string {
	return "ExampleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleDeleteRequestValidationError{}

// Validate checks the field values on ExampleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleDeleteResponseMultiError, or nil if none found.
func (m *ExampleDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleDeleteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleDeleteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleDeleteResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleDeleteResponseMultiError(errors)
	}

	return nil
}

// ExampleDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ExampleDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ExampleDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleDeleteResponseMultiError) AllErrors() []error { return m }

// ExampleDeleteResponseValidationError is the validation error returned by
// ExampleDeleteResponse.Validate if the designated constraints aren't met.
type ExampleDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleDeleteResponseValidationError) ErrorName() string {
	return "ExampleDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleDeleteResponseValidationError{}

// Validate checks the field values on ExampleTestCustomHttpRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleTestCustomHttpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleTestCustomHttpRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleTestCustomHttpRequestMultiError, or nil if none found.
func (m *ExampleTestCustomHttpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleTestCustomHttpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return ExampleTestCustomHttpRequestMultiError(errors)
	}

	return nil
}

// ExampleTestCustomHttpRequestMultiError is an error wrapping multiple
// validation errors returned by ExampleTestCustomHttpRequest.ValidateAll() if
// the designated constraints aren't met.
type ExampleTestCustomHttpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleTestCustomHttpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleTestCustomHttpRequestMultiError) AllErrors() []error { return m }

// ExampleTestCustomHttpRequestValidationError is the validation error returned
// by ExampleTestCustomHttpRequest.Validate if the designated constraints
// aren't met.
type ExampleTestCustomHttpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleTestCustomHttpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleTestCustomHttpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleTestCustomHttpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleTestCustomHttpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleTestCustomHttpRequestValidationError) ErrorName() string {
	return "ExampleTestCustomHttpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleTestCustomHttpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleTestCustomHttpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleTestCustomHttpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleTestCustomHttpRequestValidationError{}

// Validate checks the field values on ExampleTestErrorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleTestErrorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleTestErrorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleTestErrorRequestMultiError, or nil if none found.
func (m *ExampleTestErrorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleTestErrorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExampleTestErrorRequestMultiError(errors)
	}

	return nil
}

// ExampleTestErrorRequestMultiError is an error wrapping multiple validation
// errors returned by ExampleTestErrorRequest.ValidateAll() if the designated
// constraints aren't met.
type ExampleTestErrorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleTestErrorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleTestErrorRequestMultiError) AllErrors() []error { return m }

// ExampleTestErrorRequestValidationError is the validation error returned by
// ExampleTestErrorRequest.Validate if the designated constraints aren't met.
type ExampleTestErrorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleTestErrorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleTestErrorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleTestErrorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleTestErrorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleTestErrorRequestValidationError) ErrorName() string {
	return "ExampleTestErrorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleTestErrorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleTestErrorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleTestErrorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleTestErrorRequestValidationError{}

// Validate checks the field values on ExampleTestErrorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExampleTestErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExampleTestErrorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExampleTestErrorResponseMultiError, or nil if none found.
func (m *ExampleTestErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExampleTestErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleTestErrorResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleTestErrorResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleTestErrorResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExampleTestErrorResponseValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExampleTestErrorResponseValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleTestErrorResponseValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExampleTestErrorResponseMultiError(errors)
	}

	return nil
}

// ExampleTestErrorResponseMultiError is an error wrapping multiple validation
// errors returned by ExampleTestErrorResponse.ValidateAll() if the designated
// constraints aren't met.
type ExampleTestErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExampleTestErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExampleTestErrorResponseMultiError) AllErrors() []error { return m }

// ExampleTestErrorResponseValidationError is the validation error returned by
// ExampleTestErrorResponse.Validate if the designated constraints aren't met.
type ExampleTestErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleTestErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleTestErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleTestErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleTestErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleTestErrorResponseValidationError) ErrorName() string {
	return "ExampleTestErrorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleTestErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleTestErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleTestErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleTestErrorResponseValidationError{}
